package common;

import java.io.File;
import java.io.FileReader;
import java.io.FileWriter;
import java.io.IOException;
import java.lang.reflect.Type;
import java.util.HashMap;
import java.util.Map;

import com.google.gson.Gson;
import com.google.gson.reflect.TypeToken;



public class Utils {
	
	private static final String FILE_PATH = "dataStore.json";
    private static final Gson gson = new Gson();

    // Store single value or list
    public static void set(String key, Object value) {
        Map<String, Object> data = load();
        data.put(key, value);
        save(data);
    }

    // Retrieve value (String or List)
    public static <T> T get(String key, Class<T> type) {
        Map<String, Object> data = load();
        return type.cast(data.get(key));
    }

    // Load JSON file content
    private static Map<String, Object> load() {
        try {
            File file = new File(FILE_PATH);
            if (file.exists()) {
                FileReader reader = new FileReader(file);
                Type type = new TypeToken<Map<String, Object>>() {}.getType();
                return gson.fromJson(reader, type);
            }
        } catch (IOException e) {
            e.printStackTrace();
        }
        return new HashMap<>();
    }

    // Save data to JSON file
    private static void save(Map<String, Object> data) {
        try {
            FileWriter writer = new FileWriter(FILE_PATH);
            gson.toJson(data, writer);
            writer.flush();
            writer.close();
        } catch (IOException e) {
            e.printStackTrace();
        }
    }
}
