package requestBuilder;

import java.io.IOException;
import java.util.Arrays;
import java.util.List;
import java.util.Map;

import common.ConfigReader;
import common.ExcelReader;
import io.restassured.response.Response;
import io.restassured.specification.RequestSpecification;
import lombok.Getter;
import lombok.Setter;
import payload.Class_POJO;
import payload.Login_POJO;

@Getter
@Setter
public class ClassRequest {
	 private Class_POJO class_POJO;  
	    private RequestSpecification requestspecification;
	    private Response response;
	
	public ClassRequest() {
        this.class_POJO = new Class_POJO();
    }
	
	
	public void classPostRequestbody(String sheetName, String testCaseID) throws IOException {
        Map<String, String> testData = ExcelReader.getTestData(sheetName, testCaseID);
        String usecase = testData.get("usecase");

        if ("valid".equalsIgnoreCase(usecase)) {
        	class_POJO.setBatchId(1234); //set stored batchId
        }
        	else {
        		//int batchId = Integer.parseInt(testData.get("batchId"));
        		class_POJO.setBatchId(Integer.parseInt(testData.get("batchId")));
        	}
        
        	class_POJO.setClassNo(Integer.parseInt(testData.get("classNo")));
        	class_POJO.setClassDate(testData.get("classDate"));
        	class_POJO.setClassTopic(testData.get("classTopic"));
        	class_POJO.setClassStatus(testData.get("classStatus"));
        	
        	 if ("valid".equalsIgnoreCase(usecase)) {
             	class_POJO.setClassStaffId("U123"); //set stored batchId
             }
             	else {
             		//int batchId = Integer.parseInt(testData.get("batchId"));
             		class_POJO.setClassStaffId(testData.get("classStaffId"));
             	}
        	 
        	 class_POJO.setClassDescription(testData.get("ClassDescription"));
         	class_POJO.setClassTopic(testData.get("classTopic"));
         	class_POJO.setClassComments(testData.get("classComments"));
         	 class_POJO.setClassNotes(testData.get("classNotes"));
          	class_POJO.setClassRecordingPath(testData.get("classRecordingPath"));
          	String classScheduledDatesStr = testData.get("classScheduledDates_1");
          	String[] datesArray = classScheduledDatesStr.split(",");
          	List<String> classScheduledDates = Arrays.asList(datesArray);
          	class_POJO.setClassScheduledDates(classScheduledDates);
    }

	 public Class_POJO getLoginRequestBody() {  
	        return class_POJO;
	    }
	
	
	 public void setEndpoint(String sheetName, String testCaseID) throws IOException {
	        Map<String, String> testData = ExcelReader.getTestData(sheetName, testCaseID);

	        if ("invalid Endpoint".equalsIgnoreCase(testData.get("usecase"))) {
	            class_POJO.setEndpoint(testData.get("Endpoint"));  
	        } else {
	        	
	        	if("post".equalsIgnoreCase(testData.get("Method"))) {
	        	
	        	String classPost = enumPackage.Endpoint.Login_POST.getPath(); 
	        	class_POJO.setEndpoint(classPost); 
	        }
	    }

	    public String getEndpoint() {
	        return class_POJO.getEndpoint();  
	    }

	 
	 
	 
	 
	 
	 
	 
	 
	 
	 
	 
	 
	 
	 
	 
	 
	 
	 
	 

}
